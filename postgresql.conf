# PostgreSQL Configuration for High Write Performance
# Save as postgresql.conf in project root

# PostgreSQL Configuration with Resource Detection
# Uses PostgreSQL's built-in scaling and environment variables
# Save as postgresql.conf in project root

# Memory Configuration - Uses PostgreSQL defaults with scaling multipliers
# PostgreSQL automatically detects system RAM and scales appropriately
shared_buffers = 128MB                  # Will auto-scale on larger systems
#shared_buffers = ${POSTGRES_SHARED_BUFFERS:-128MB}  # Environment override

# Dynamic work_mem calculation (PostgreSQL default scales with max_connections)
work_mem = 4MB                          # Conservative default, auto-scales down
maintenance_work_mem = 64MB             # Auto-scales with available memory

# effective_cache_size should be ~50% of system RAM
# PostgreSQL will estimate this automatically if not set explicitly
#effective_cache_size = 4GB            # Remove to let PostgreSQL auto-detect

# Write Performance Optimization
wal_buffers = 8MB                       # Smaller WAL buffer for development
checkpoint_timeout = 15min              # Maximum time between checkpoints
checkpoint_completion_target = 0.9      # Spread checkpoint writes over time
max_wal_size = 2GB                      # Maximum WAL size before checkpoint
min_wal_size = 512MB                    # Minimum WAL size

# For short-term buffer use case - can be more aggressive
synchronous_commit = off                # Faster commits (small data loss risk)
commit_delay = 100                      # Group commits for better throughput
commit_siblings = 10                    # Minimum concurrent transactions for delay

# Connection Management
max_connections = 100                   # Reasonable default for most systems

# Environment-based scaling examples (comment in docker-compose.yml):
# POSTGRES_SHARED_BUFFERS=128MB    # Development  
# POSTGRES_SHARED_BUFFERS=512MB    # Small production
# POSTGRES_SHARED_BUFFERS=2GB      # Large production
shared_preload_libraries = ''          # No extra modules needed

# Logging Configuration (minimal for performance)
log_min_messages = warning              # Reduce log volume
log_min_error_statement = error         # Only log errors
log_statement = 'none'                  # Don't log statements
log_destination = 'stderr'              # Standard error output
logging_collector = off                 # Disable log file collection

# Query Planning
random_page_cost = 1.1                  # Lower for SSD storage
effective_io_concurrency = 200          # Higher for SSD concurrent I/O

# Background Writer (helps with consistent performance)
bgwriter_delay = 50ms                   # Background writer sleep time
bgwriter_lru_maxpages = 1000           # Pages to write per round
bgwriter_lru_multiplier = 10.0         # Multiple of recent usage

# Statistics Collection (minimal for write workload)
track_activities = on                   # Track running commands
track_counts = on                       # Track table/index access stats
track_io_timing = off                   # Don't track I/O timing (overhead)
track_functions = none                  # Don't track function calls

# Autovacuum (important for high write workload)
autovacuum = on                         # Enable autovacuum
autovacuum_max_workers = 3              # Number of autovacuum workers
autovacuum_naptime = 30s                # Sleep time between runs
autovacuum_vacuum_threshold = 1000      # Min rows before vacuum
autovacuum_analyze_threshold = 500      # Min rows before analyze

# Locale and Character Set
lc_messages = 'en_US.utf8'
lc_monetary = 'en_US.utf8'
lc_numeric = 'en_US.utf8'
lc_time = 'en_US.utf8'
default_text_search_config = 'pg_catalog.english'

# Network and Security
listen_addresses = '*'                  # Listen on all addresses
port = 5432                            # Default PostgreSQL port